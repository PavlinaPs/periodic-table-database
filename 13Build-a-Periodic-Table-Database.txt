Instructions

You are started with a periodic_table database that has information about some chemical elements. You can connect to it by entering psql --username=freecodecamp --dbname=periodic_table in the terminal. You may want to get a little familiar with the existing tables, columns, and rows. Read the instructions below and complete user stories to finish the project. Certain tests may not pass until other user stories are complete. Good luck!

Part 1: Fix the database

There are some mistakes in the database that need to be fixed or changed. See the user stories below for what to change.

Part 2: Create your git repository

You need to make a small bash program. The code needs to be version controlled with git, so you will need to turn the suggested folder into a git repository.

Part 3: Create the script

Lastly, you need to make a script that accepts an argument in the form of an atomic number, symbol, or name of an element and outputs some information about the given element. In your script, you can create a PSQL variable for querying the database like this: PSQL="psql --username=freecodecamp --dbname=<database_name> -t --no-align -c", add more flags if you need to.

Notes:
If you leave your virtual machine, your database may not be saved. You can make a dump of it by entering pg_dump -cC --inserts -U freecodecamp periodic_table > periodic_table.sql in a bash terminal (not the psql one). It will save the commands to rebuild your database in periodic_table.sql. The file will be located where the command was entered. If it's anything inside the project folder, the file will be saved in the VM. You can rebuild the database by entering psql -U postgres < periodic_table.sql in a terminal where the .sql file is.

If you are saving your progress on freeCodeCamp.org, after getting all the tests to pass, follow the instructions above to save a dump of your database. Save the periodic_table.sql file, as well as the final version of your element.sh file, in a public repository and submit the URL to it on freeCodeCamp.org.

Complete the tasks below

    You should rename the weight column to atomic_mass

    You should rename the melting_point column to melting_point_celsius and the boiling_point column to boiling_point_celsius

    Your melting_point_celsius and boiling_point_celsius columns should not accept null values

    You should add the UNIQUE constraint to the symbol and name columns from the elements table

    Your symbol and name columns should have the NOT NULL constraint

    You should set the atomic_number column from the properties table as a foreign key that references the column of the same name in the elements table

    You should create a types table that will store the three types of elements

    Your types table should have a type_id column that is an integer and the primary key

    Your types table should have a type column that's a VARCHAR and cannot be null. It will store the different types from the type column in the properties table

    You should add three rows to your types table whose values are the three different types from the properties table

    Your properties table should have a type_id foreign key column that references the type_id column from the types table. It should be an INT with the NOT NULL constraint

    Each row in your properties table should have a type_id value that links to the correct type from the types table

    You should capitalize the first letter of all the symbol values in the elements table. Be careful to only capitalize the letter and not change any others

    You should remove all the trailing zeros after the decimals from each row of the atomic_mass column. You may need to adjust a data type to DECIMAL for this. The final values they should be are in the atomic_mass.txt file

    You should add the element with atomic number 9 to your database. Its name is Fluorine, symbol is F, mass is 18.998, melting point is -220, boiling point is -188.1, and it's a nonmetal

    You should add the element with atomic number 10 to your database. Its name is Neon, symbol is Ne, mass is 20.18, melting point is -248.6, boiling point is -246.1, and it's a nonmetal

    You should create a periodic_table folder in the project folder and turn it into a git repository with git init

    Your repository should have a main branch with all your commits

    Your periodic_table repo should have at least five commits

    You should create an element.sh file in your repo folder for the program I want you to make

    Your script (.sh) file should have executable permissions

    If you run ./element.sh, it should output only Please provide an element as an argument. and finish running.

    If you run ./element.sh 1, ./element.sh H, or ./element.sh Hydrogen, it should output only The element with atomic number 1 is Hydrogen (H). It's a nonmetal, with a mass of 1.008 amu. Hydrogen has a melting point of -259.1 celsius and a boiling point of -252.9 celsius.

    If you run ./element.sh script with another element as input, you should get the same output but with information associated with the given element.

    If the argument input to your element.sh script doesn't exist as an atomic_number, symbol, or name in the database, the only output should be I could not find that element in the database.

    The message for the first commit in your repo should be Initial commit

    The rest of the commit messages should start with fix:, feat:, refactor:, chore:, or test:

    You should delete the non existent element, whose atomic_number is 1000, from the two tables

    Your properties table should not have a type column

    You should finish your project while on the main branch. Your working tree should be clean and you should not have any uncommitted changes


codeally@72585cb8cbc6:~/project$ psql --username=freecodecamp --dbname=periodic_table
psql (12.9 (Ubuntu 12.9-2.pgdg20.04+1))
Type "help" for help.

periodic_table=> 

periodic_table-> \d
             List of relations
 Schema |    Name    | Type  |    Owner     
--------+------------+-------+--------------
 public | elements   | table | freecodecamp
 public | properties | table | freecodecamp
(2 rows)


periodic_table-> \d elements
                        Table "public.elements"
    Column     |         Type          | Collation | Nullable | Default 
---------------+-----------------------+-----------+----------+---------
 atomic_number | integer               |           | not null | 
 symbol        | character varying(2)  |           |          | 
 name          | character varying(40) |           |          | 
Indexes:
    "elements_pkey" PRIMARY KEY, btree (atomic_number)
    "elements_atomic_number_key" UNIQUE CONSTRAINT, btree (atomic_number)


periodic_table-> \d properties
                       Table "public.properties"
    Column     |         Type          | Collation | Nullable | Default 
---------------+-----------------------+-----------+----------+---------
 atomic_number | integer               |           | not null | 
 type          | character varying(30) |           |          | 
 weight        | numeric(9,6)          |           | not null | 
 melting_point | numeric               |           |          | 
 boiling_point | numeric               |           |          | 
Indexes:
    "properties_pkey" PRIMARY KEY, btree (atomic_number)
    "properties_atomic_number_key" UNIQUE CONSTRAINT, btree (atomic_number)


* You should rename the weight column to atomic_mass
periodic_table=> ALTER TABLE properties RENAME COLUMN weight TO atomic_mass;
ALTER TABLE
periodic_table=> 


* You should rename the melting_point column to melting_point_celsius and the boiling_point column to boiling_point_celsius
periodic_table=> ALTER TABLE properties RENAME COLUMN melting_point TO melting_point_celsius;
ALTER TABLE
periodic_table=> ALTER TABLE properties RENAME COLUMN boiling_point TO boiling_point_celsius;
ALTER TABLE
periodic_table=> 


* Your melting_point_celsius and boiling_point_celsius columns should not accept null values
periodic_table=> ALTER TABLE properties ALTER COLUMN melting_point_celsius SET NOT NULL;
ALTER TABLE
periodic_table=> ALTER TABLE properties ALTER COLUMN boiling_point_celsius SET NOT NULL;
ALTER TABLE


* You should add the UNIQUE constraint to the symbol and name columns from the elements table
periodic_table=> ALTER TABLE elements ADD UNIQUE(symbol);
ALTER TABLE
periodic_table=> ALTER TABLE elements ADD UNIQUE(name);
ALTER TABLE


* Your symbol and name columns should have the NOT NULL constraint
periodic_table=> ALTER TABLE elements ALTER COLUMN symbol SET NOT NULL
periodic_table-> ;
ALTER TABLE
periodic_table=> ALTER TABLE elements ALTER COLUMN name SET NOT NULL;
ALTER TABLE

periodic_table=> \d elements
                        Table "public.elements"
    Column     |         Type          | Collation | Nullable | Default 
---------------+-----------------------+-----------+----------+---------
 atomic_number | integer               |           | not null | 
 symbol        | character varying(2)  |           | not null | 
 name          | character varying(40) |           | not null | 
Indexes:
    "elements_pkey" PRIMARY KEY, btree (atomic_number)
    "elements_atomic_number_key" UNIQUE CONSTRAINT, btree (atomic_number)
    "elements_name_key" UNIQUE CONSTRAINT, btree (name)
    "elements_symbol_key" UNIQUE CONSTRAINT, btree (symbol)

periodic_table=> \d properties
                           Table "public.properties"
        Column         |         Type          | Collation | Nullable | Default 
-----------------------+-----------------------+-----------+----------+---------
 atomic_number         | integer               |           | not null | 
 type                  | character varying(30) |           |          | 
 atomic_mass           | numeric(9,6)          |           | not null | 
 melting_point_celsius | numeric               |           | not null | 
 boiling_point_celsius | numeric               |           | not null | 
Indexes:
    "properties_pkey" PRIMARY KEY, btree (atomic_number)
    "properties_atomic_number_key" UNIQUE CONSTRAINT, btree (atomic_number)


* You should set the atomic_number column from the properties table as a foreign key that references the column of the same name in the elements table
periodic_table=> ALTER TABLE properties ADD FOREIGN KEY(atomic_number) REFERENCES elements(atomic_number);


* You should create a types table that will store the three types of elements
periodic_table=> CREATE TABLE types();


* Your types table should have a type_id column that is an integer and the primary key
periodic_table=> ALTER TABLE types ADD COLUMN type_id INT PRIMARY KEY;


* Your types table should have a type column that's a VARCHAR and cannot be null. It will store the different types from the type column in the properties table
periodic_table=> ALTER TABLE types ADD COLUMN type VARCHAR(50) NOT NULL;


* You should add three rows to your types table whose values are the three different types from the properties table
periodic_table=> INSERT INTO types(type_id, type) VALUES(1, 'nonmetal');
INSERT 0 1
periodic_table=> INSERT INTO types(type_id, type) VALUES(2, 'metalloid'), (3, 'metal');
INSERT 0 2


* Your properties table should have a type_id foreign key column that references the type_id column from the types table. It should be an INT with the NOT NULL constraint
* Each row in your properties table should have a type_id value that links to the correct type from the types table

periodic_table=> ALTER TABLE properties ADD COLUMN type_id INT;
ALTER TABLE

periodic_table=> SELECT * FROM properties;
 atomic_number |   type    | atomic_mass | melting_point_celsius | boiling_point_celsius | type_id 
---------------+-----------+-------------+-----------------------+-----------------------+---------
             1 | nonmetal  |    1.008000 |                -259.1 |                -252.9 |        
             2 | nonmetal  |    4.002600 |                -272.2 |                  -269 |        
             3 | metal     |    6.940000 |                180.54 |                  1342 |        
             4 | metal     |    9.012200 |                  1287 |                  2470 |        
             5 | metalloid |   10.810000 |                  2075 |                  4000 |        
             6 | nonmetal  |   12.011000 |                  3550 |                  4027 |        
             7 | nonmetal  |   14.007000 |                -210.1 |                -195.8 |        
             8 | nonmetal  |   15.999000 |                  -218 |                  -183 |        
          1000 | metalloid |    1.000000 |                    10 |                   100 |        
(9 rows)

periodic_table=> SELECT * FROM types
periodic_table-> ;
 type_id |   type    
---------+-----------
       1 | nonmetal
       2 | metalloid
       3 | metal
(3 rows)

periodic_table=> UPDATE properties SET type_id=1 WHERE type='nonmetal';
UPDATE 5
periodic_table=> SELECT * FROM properties;
 atomic_number |   type    | atomic_mass | melting_point_celsius | boiling_point_celsius | type_id 
---------------+-----------+-------------+-----------------------+-----------------------+---------
             3 | metal     |    6.940000 |                180.54 |                  1342 |        
             4 | metal     |    9.012200 |                  1287 |                  2470 |        
             5 | metalloid |   10.810000 |                  2075 |                  4000 |        
          1000 | metalloid |    1.000000 |                    10 |                   100 |        
             1 | nonmetal  |    1.008000 |                -259.1 |                -252.9 |       1
             2 | nonmetal  |    4.002600 |                -272.2 |                  -269 |       1
             6 | nonmetal  |   12.011000 |                  3550 |                  4027 |       1
             7 | nonmetal  |   14.007000 |                -210.1 |                -195.8 |       1
             8 | nonmetal  |   15.999000 |                  -218 |                  -183 |       1
(9 rows)

periodic_table=> UPDATE properties SET type_id=2 WHERE type='metalloid';
UPDATE 2
periodic_table=> UPDATE properties SET type_id=3 WHERE type='metal';
UPDATE 2
periodic_table=> SELECT * FROM properties;
 atomic_number |   type    | atomic_mass | melting_point_celsius | boiling_point_celsius | type_id 
---------------+-----------+-------------+-----------------------+-----------------------+---------
             1 | nonmetal  |    1.008000 |                -259.1 |                -252.9 |       1
             2 | nonmetal  |    4.002600 |                -272.2 |                  -269 |       1
             6 | nonmetal  |   12.011000 |                  3550 |                  4027 |       1
             7 | nonmetal  |   14.007000 |                -210.1 |                -195.8 |       1
             8 | nonmetal  |   15.999000 |                  -218 |                  -183 |       1
             5 | metalloid |   10.810000 |                  2075 |                  4000 |       2
          1000 | metalloid |    1.000000 |                    10 |                   100 |       2
             3 | metal     |    6.940000 |                180.54 |                  1342 |       3
             4 | metal     |    9.012200 |                  1287 |                  2470 |       3
(9 rows)

periodic_table=> ALTER TABLE properties ALTER COLUMN type_id SET NOT NULL;
ALTER TABLE
periodic_table=> ALTER TABLE properties ADD FOREIGN KEY(type_id) REFERENCES types(type_id);
ALTER TABLE
periodic_table=>


* You should capitalize the first letter of all the symbol values in the elements table. Be careful to only capitalize the letter and not change any others

periodic_table=> UPDATE elements SET symbol=INITCAP(symbol);
UPDATE 9
periodic_table=> SELECT symbol FROM elements;
 symbol 
--------
 H
 He
 Li
 Be
 B
 C
 N
 O
 Mt
(9 rows)


* You should remove all the trailing zeros after the decimals from each row of the atomic_mass column. You may need to adjust a data type to DECIMAL for this. The final values they should be are in the atomic_mass.txt file

periodic_table=> ALTER TABLE properties ALTER COLUMN atomic_mass SET DATA TYPE DECIMAL;
ALTER TABLE

periodic_table=> SELECT atomic_mass::REAL FROM properties ORDER BY atomic_number;
 atomic_mass 
-------------
       1.008
      4.0026
        6.94
      9.0122
       10.81
      12.011
      14.007
      15.999
           1
(9 rows)

periodic_table=> UPDATE properties SET atomic_mass=atomic_mass::REAL WHERE atomic_mass IS NOT NULL;
UPDATE 9
periodic_table=> SELECT * FROM properties;
 atomic_number |   type    | atomic_mass | melting_point_celsius | boiling_point_celsius | type_id 
---------------+-----------+-------------+-----------------------+-----------------------+---------
             1 | nonmetal  |       1.008 |                -259.1 |                -252.9 |       1
             2 | nonmetal  |      4.0026 |                -272.2 |                  -269 |       1
             6 | nonmetal  |      12.011 |                  3550 |                  4027 |       1
             7 | nonmetal  |      14.007 |                -210.1 |                -195.8 |       1
             8 | nonmetal  |      15.999 |                  -218 |                  -183 |       1
             5 | metalloid |       10.81 |                  2075 |                  4000 |       2
          1000 | metalloid |           1 |                    10 |                   100 |       2
             3 | metal     |        6.94 |                180.54 |                  1342 |       3
             4 | metal     |      9.0122 |                  1287 |                  2470 |       3
(9 rows)


* You should create a periodic_table folder in the project folder and turn it into a git repository with git init
codeally@7a4027f0f3b4:~/project$ mkdir periodic_table
codeally@7a4027f0f3b4:~/project$ cd periodic_table
codeally@7a4027f0f3b4:~/project/periodic_table$ git init
Initialized empty Git repository in /home/codeally/project/periodic_table/.git/
codeally@7a4027f0f3b4:~/project/periodic_table$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)


* Your repository should have a main branch with all your commits
codeally@7a4027f0f3b4:~/project/periodic_table$ git checkout -b main
Switched to a new branch 'main'
codeally@7a4027f0f3b4:~/project/periodic_table$ git status
On branch main

No commits yet

nothing to commit (create/copy files and use "git add" to track)


* Your periodic_table repo should have at least five commits


* You should create an element.sh file in your repo folder for the program I want you to make
codeally@7a4027f0f3b4:~/project/periodic_table$ touch element.sh

display files in directory
codeally@7a4027f0f3b4:~/project/periodic_table$ ls -a
.  ..  element.sh  .git


* Your script (.sh) file should have executable permissions
codeally@7a4027f0f3b4:~/project/periodic_table$ chmod +x element.sh


* If you run ./element.sh, it should output only Please provide an element as an argument. and finish running.
#!/bin/bash

echo "Please provide an element as an argument."

codeally@7a4027f0f3b4:~/project/periodic_table$ ./element.sh
Please provide an element as an argument.


codeally@7a4027f0f3b4:~/project/periodic_table$ git add .
codeally@7a4027f0f3b4:~/project/periodic_table$ git commit -m "initial commit"
[main (root-commit) dbccdaa] initial commit
 1 file changed, 3 insertions(+)
 create mode 100755 element.sh
codeally@7a4027f0f3b4:~/project/periodic_table$ git log --oneline
dbccdaa (HEAD -> main) initial commit

* The message for the first commit in your repo should be Initial commit

codeally@7a4027f0f3b4:~/project/periodic_table$ git commit --amend
[main b2ccb2c] Initial commit
 Date: Fri Dec 15 21:28:02 2023 +0000
 1 file changed, 3 insertions(+)
 create mode 100755 element.sh
codeally@7a4027f0f3b4:~/project/periodic_table$ git log
commit b2ccb2c0c71f33dade1a451be0eb1669937436b5 (HEAD -> main)
Author: PavlinaPs <pavlina.psarsky@gmail.com>
Date:   Fri Dec 15 21:28:02 2023 +0000

    Initial commit


*If you run ./element.sh, it should output only Please provide an element as an argument. and finish running.

# if there is no argument
if [[ -z $1 ]]
  then
    echo "Please provide an element as an argument."
    exit
  fi


* If you run ./element.sh 1, ./element.sh H, or ./element.sh Hydrogen, it should output only The element with atomic number 1 is Hydrogen (H). It's a nonmetal, with a mass of 1.008 amu. Hydrogen has a melting point of -259.1 celsius and a boiling point of -252.9 celsius.

* If you run ./element.sh script with another element as input, you should get the same output but with information associated with the given element.

* If the argument input to your element.sh script doesn't exist as an atomic_number, symbol, or name in the database, the only output should be I could not find that element in the database.

To get the bikes available, you need to query the database from your script. Below the "shebang", add a PSQL variable that looks like this: PSQL="psql -X --username=freecodecamp --dbname=bikes --tuples-only -c". You will then be able to use it to query the database like this: $($PSQL "<query_here>").





# if the input is a number, let's look in the db for atomic_number
if [[ $1 =~ ^[0-9]+$ ]]
  then 

  # get the information from the db
  DATA=$($PSQL "SELECT * FROM elements LEFT JOIN properties ON elements.atomic_number = properties.atomic_number WHERE elements.atomic_number=$1")

     # if there is no such number in the db
   if [[ -z $DATA ]]
     then
     echo "I could not find that element in the database."
     exit
   fi

    echo $DATA | while IFS="|" read ATOMIC_NUMBER SYMBOL NAME
      do
       echo "The element with atomic number $ATOMIC_NUMBER is $NAME ($SYMBOL)."
      done

  else
  # input is a string, let's check in the db
  DATA=$($PSQL "SELECT * FROM elements LEFT JOIN properties ON elements.atomic_number = properties.atomic_number WHERE elements.symbol='$1' OR elements.name='$1'")

     # if there is no such number or string in the db
   if [[ -z $DATA ]]
     then
     echo "I could not find that element in the database."
     exit
   fi

    echo $DATA | while IFS="|" read ATOMIC_NUMBER SYMBOL NAME
      do
       echo "The element with atomic number $ATOMIC_NUMBER is $NAME ($SYMBOL)."
      done

fi